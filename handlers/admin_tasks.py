from aiogram import F, Router
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State
from utils.models import Users, Task
from utils.keyboards import show_users, show_tasks, edit_task, back_btn

admin_tasks_router = Router()

edit_value = State()


@admin_tasks_router.callback_query(F.data == 'admin_tasks')
async def admin_tasks_handler(callback: CallbackQuery):
    await callback.message.edit_text('üë• –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—å–∏ –∑–∞–¥–∞—á–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å',
                                     reply_markup=show_users(Users.select()))


@admin_tasks_router.callback_query(F.data.startswith('user_show'))
async def user_show_handler(callback: CallbackQuery):
    user = Users.get_by_id(int(callback.data.split()[1]))
    tasks = Task.select().where(Task.user == user)
    await callback.message.edit_text(f'üôã‚Äç‚ôÇÔ∏è –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.name}, –Ω–∏–∂–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω—ã –µ–≥–æ –∑–∞–¥–∞—á–∏',
                                     reply_markup=show_tasks(tasks, user))


@admin_tasks_router.callback_query(F.data.startswith('task_show'))
async def task_show_handler(callback: CallbackQuery):
    task = Task.get_by_id(int(callback.data.split()[1]))
    text = f'''üë§ <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å</b>: <i>{task.user.name}</i>
üÜî <b>–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:</b> <i>{task.name}</i>
üìù <b>–ó–∞–¥–∞—á–∞:</b> <i>{task.text}</i>
üìÖ <b>–°—Ä–æ–∫:</b> <i>{task.date}</i>
{"üü¢" if task.status else "üî¥"} <b>–°—Ç–∞—Ç—É—Å:</b> <i>{"–≤—ã–ø–æ–ª–Ω–µ–Ω–∞" if task.status else "–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"}</i>'''
    await callback.message.edit_text(text, reply_markup=edit_task(task), parse_mode="HTML")


@admin_tasks_router.callback_query(F.data.startswith('add_task'))
async def add_task_handler(callback: CallbackQuery):
    user = Users.get_by_id(int(callback.data.split()[1]))
    task = Task.create(user=user)
    await callback.message.edit_text(f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –∑–∞–¥–∞—á—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.name}!\n'
                                     f'üìù –ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á—É¬ª, —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –µ—ë',
                                     reply_markup=back_btn(f'task_show {task}', 'üìù –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á—É'))
    await callback.bot.send_message(user.user_id, 'üìù –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–∏–ª –í–∞–º –∑–∞–¥–∞—á—É')


@admin_tasks_router.callback_query(F.data.startswith('task_edit'))
async def task_edit_handler(callback: CallbackQuery, state: FSMContext):
    cmd, do, task_id = callback.data.split()
    await state.update_data(do=do, past_msg_id=callback.message.message_id, task=task_id)
    await state.set_state(edit_value)
    await callback.message.edit_text('üëâ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ',
                                     reply_markup=back_btn(f'task_show {task_id}'))


@admin_tasks_router.message(edit_value)
async def edit_value_handler(message: Message, state: FSMContext):
    data = await state.get_data()
    task = Task.get_by_id(int(data['task']))
    await message.delete()
    await state.clear()
    if data['do'] == 'name':
        task.name = message.text
    elif data['do'] == 'task':
        task.text = message.text
    elif data['do'] == 'date':
        task.date = message.text
    task.save()
    await message.bot.edit_message_text('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ–Ω—è–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏!',
                                        chat_id=message.chat.id, message_id=data['past_msg_id'],
                                        reply_markup=back_btn(f'task_show {task}'))


@admin_tasks_router.callback_query(F.data.startswith('task_delete'))
async def task_delete_handler(callback: CallbackQuery):
    task = Task.get_by_id(int(callback.data.split()[1]))
    task.delete_instance()
    await callback.message.edit_text(f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –∑–∞–¥–∞—á—É <b>{task.name}</b> —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '
                                     f'<b>{task.user.name}</b>!',
                                     reply_markup=back_btn(f'user_show {task.user}'),
                                     parse_mode="HTML")
    await callback.bot.send_message(task.user.user_id,
                                    f'üìù –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–∏–ª —É –í–∞—Å –∑–∞–¥–∞—á—É <b>{task.name}</b>',
                                    parse_mode="HTML")
